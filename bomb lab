使用GDB
0000000000400ee0 <phase_1>:
400ee0: sub    $0x8,%rsp # 
400ee4: mov    $0x402400,%esi 
400ee9: callq  401338 <strings_not_equal> 
400eee: test   %eax,%eax    
400ef0: je     400ef7 <phase_1+0x17> 
400ef2: callq  40143a <explode_bomb> 
400ef7: add    $0x8,%rsp
400efb: retq
可以看出是将%esi加一个偏移402400，这里我们用 b *0x400ee4
(gdb) b *0x400ee4
Breakpoint 1 at 0x400ee4
(gdb) run 
Starting program: /root/bomb/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
asd

Breakpoint 1, 0x0000000000400ee4 in phase_1 ()
(gdb) x/s 0x402400
0x402400:       "Border relations with Canada have never been better."
phrase 2：
0000000000400efc <phase_2>:
400efc: push   %rbp # 栈帧相关
400efd: push   %rbx # 栈帧相关
400efe: sub    $0x28,%rsp # 栈指针减40，说明有局部变量的分配
400f02: mov    %rsp,%rsi # 将栈指针作为第二个参数
400f05: callq  40145c <read_six_numbers> # 传入函数中
400f0a: cmpl   $0x1,(%rsp) # 查看栈指针的内存的值是否为1
400f0e: je     400f30 <phase_2+0x34> # 是 跳转400f30
400f10: callq  40143a <explode_bomb> # 否 爆炸
400f15: jmp    400f30 <phase_2+0x34>
400f17: mov    -0x4(%rbx),%eax # (%rbx-4)后，该内存地址的值赋值给%eax
400f1a: add    %eax,%eax # %eax+=%eax
400f1c: cmp    %eax,(%rbx) # 比较%eax和(%rbx)也就是下一个数的值
400f1e: je     400f25 <phase_2+0x29> # 相等跳转至400f25
400f20: callq  40143a <explode_bomb> # 不等爆炸
400f25: add    $0x4,%rbx # %rbx+=4
400f29: cmp    %rbp,%rbx # %rbp,%rbx比较看有没有比较完
400f2c: jne    400f17 <phase_2+0x1b># 不相等时400f17
400f2e: jmp    400f3c <phase_2+0x40># 相等时400f3c
400f30: lea    0x4(%rsp),%rbx # 栈指针+4后赋值给%rbx
400f35: lea    0x18(%rsp),%rbp # 栈指针+24后赋值给%rbp
400f3a: jmp    400f17 <phase_2+0x1b> # 跳至 400f17
400f3c: add    $0x28,%rsp
400f40: pop    %rbx
400f41: pop    %rbp
400
指针的值是从1开始的，然后跳转到400f30, 然后%eax自加，这时我们应该就知道了six number应该是时一个等比数列，公比为2
故1，2，4，8，16，32，64
phrase 3;
Breakpoint 1, 0x0000000000400f51 in phase_3 ()
(gdb) x/s 0x4025cf
0x4025cf:       "%d %d"
(gdb)
我们看到要输入两个整数0000000000400f43 <phase_3>:
400f43: sub    $0x18,%rsp   # 栈指针减24，说明有局部变量的分配
400f47: lea    0xc(%rsp),%rcx # 栈指针+12后赋值给%rcx
400f4c: lea    0x8(%rsp),%rdx # 栈指针+8后赋值给%rdx
400f51: mov    $0x4025cf,%esi # "%d %d"作为第二个入参准备进行函数调用
400f56: mov    $0x0,%eax # 为%eax赋值0
400f5b: callq  400bf0 <__isoc99_sscanf@plt>
400f60: cmp    $0x1,%eax # 如果输入的值的数量大于1
400f63: jg     400f6a <phase_3+0x27> # 跳转400f6a
400f65: callq  40143a <explode_bomb> # 否则爆炸
400f6a: cmpl   $0x7,0x8(%rsp) # %rsp+8的内存值与7比较
400f6f: ja     400fad <phase_3+0x6a># 大于，跳转400fad，也就是爆炸
400f71: mov    0x8(%rsp),%eax # 否则，%rsp+8的内存值赋值给%eax，也就是输入的第一个值，
400f75: jmpq   *0x402470(,%rax,8) # 并跳转至%rax*8+0x402470的内存保存的地址上；
400f7c: mov    $0xcf,%eax
400f81: jmp    400fbe <phase_3+0x7b>
400f83: mov    $0x2c3,%eax
400f88: jmp    400fbe <phase_3+0x7b>
400f8a: mov    $0x100,%eax
400f8f: jmp    400fbe <phase_3+0x7b>
400f91: mov    $0x185,%eax
400f96: jmp    400fbe <phase_3+0x7b>
400f98: mov    $0xce,%eax
400f9d: jmp    400fbe <phase_3+0x7b>
400f9f: mov    $0x2aa,%eax
400fa4: jmp    400fbe <phase_3+0x7b>
400fa6: mov    $0x147,%eax
400fab: jmp    400fbe <phase_3+0x7b>
400fad: callq  40143a <explode_bomb>
400fb2: mov    $0x0,%eax
400fb7: jmp    400fbe <phase_3+0x7b>
400fb9: mov    $0x137,%eax
400fbe: cmp    0xc(%rsp),%eax
400fc2: je     400fc9 <phase_3+0x86>
400fc4: callq  40143a <explode_bomb>
400fc9: add    $0x18,%rsp
400fcd: retq
我们可以看到第一个数不能大于7，然后我们假设是1，根据间接转换规则可以找到0x137
phrase4
phrase5
0000000000401062 <phase_5>:
  401062: push   %rbx
  401063: sub    $0x20,%rsp
  401067: mov    %rdi,%rbx
  40106a: mov    %fs:0x28,%rax
  401071: 
  401073: mov    %rax,0x18(%rsp)
  401078: xor    %eax,%eax
  40107a: callq  40131b <string_length>
  40107f: cmp    $0x6,%eax # 要求输入的字符序列长度为6
  401082: je     4010d2 <phase_5+0x70> 
  401084: callq  40143a <explode_bomb> # 不然爆炸
  401089: jmp    4010d2 <phase_5+0x70>
  # 关键循环开始
  40108b: movzbl (%rbx,%rax,1),%ecx # %rax开始时为0；这里其实是将输入的字符串保存至%ecx中
  40108f: mov    %cl,(%rsp) # 字符串的某一位保存至栈顶
  401092: mov    (%rsp),%rdx 
  401096: and    $0xf,%edx # 这一位与0xf做与运算
  401099: movzbl 0x4024b0(%rdx),%edx # 所得到的值作为指针访问0x4024b0地址下的某一位
  4010a0: mov    %dl,0x10(%rsp,%rax,1) # 将这位入栈
  4010a4: add    $0x1,%rax
  4010a8: cmp    $0x6,%rax
  4010ac: jne    40108b <phase_5+0x29>
  # 关键循环结束
  # 循环等价于：
  # for(int i=0;i<6;i++){
  #     narr[i] = array[input[i]&0xf]
  # }
  4010ae: movb   $0x0,0x16(%rsp)
  4010b3: mov    $0x40245e,%esi # 入参之一：0x40245e字符串，经检验得flyers
  4010b8: lea    0x10(%rsp),%rdi # 入参之二：上述循环压栈的字符
  4010bd: callq  401338 <strings_not_equal>
  4010c2: test   %eax,%eax
  4010c4: je     4010d9 <phase_5+0x77> # 字符串相等时才过了这一关
  4010c6: callq  40143a <explode_bomb>
  4010cb: nopl   0x0(%rax,%rax,1)
  4010d0: jmp    4010d9 <phase_5+0x77>
  4010d2: mov    $0x0,%eax
  4010d7: jmp    40108b <phase_5+0x29>
  4010d9: mov    0x18(%rsp),%rax
  4010de: xor    %fs:0x28,%rax
  4010e5: 
  4010e7: je     4010ee <phase_5+0x8c>
  4010e9: callq  400b30 <__stack_chk_fail@plt>
  4010ee: add    $0x20,%rsp
  4010f2: pop    %rbx
  4010f3: retq
(gdb) x/16c 0x4024b0
0x4024b0 <array.3449>:  109 'm' 97 'a'  100 'd' 117 'u' 105 'i' 101 'e' 114 'r' 115 's'
0x4024b8 <array.3449+8>:        110 'n' 102 'f' 111 'o' 116 't' 118 'v' 98 'b'  121 'y' 108 'l'
(gdb) x/s 0x40245e
0x40245e:       "flyers"
char array[16] = {'m','a','d','u','i','e','r','s','n','f','o','t','v','b','y','l'};
char target[6] = {'f','l','y','e','r','s'}
// 求input[i]，i属于[0,5]使得
array[input[i]&0xf] = target[i];


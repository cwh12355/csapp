//1
/* 
 * bitXor - x^y using only ~ and & 
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &
 *   Max ops: 14
 *   Rating: 1
 */
      /*主要是找出同为1，0*/
int bitXor(int x, int y) {

      return (~(x & y) & ~(~x & ~y));
}
/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 4
 *   Rating: 1
 */
int tmin() {

  return 1>>31;

}
//2
/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ & ^ | +
 *   Max ops: 10
 *   Rating: 1
 */
int isTmax(int x) {
  return !(x^!(-1>>31));
}
/* 
 * allOddBits - return 1 if all odd-numbered bits in word set to 1
 *   where bits are numbered from 0 (least significant) to 31 (most significant)
 *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 2
 */
int allOddBits(int x) {
    int VAL = 0xAAA;
  return !(x^VAL);
}
/* 
 * negate - return -x 
 *   Example: negate(1) = -1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 5
 *   Rating: 2
 *//*取反再加1*/
int negate(int x) {
  return (~x+1);
}
//3
/* 
 * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 3
 */
int isAsciiDigit(int x) {
    int val1 = ~0x30 + 1;
    int val2 = (1 << 31) + ~0x3a + 1;
    return (!((val1 + x) >> 31)) & (!((val2 + x) >> 31));
}
/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 16
 *   Rating: 3
 */
int conditional(int x, int y, int z) {
    int val = (~!!x) + 1;
  return (val&y)|(~val&z)
}
/* 
 * isLessOrEqual - if x <= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {
    int val1 = (x >> 31) + (y >> 31);
    int val2 = !((y + (~x) + 1) >> 31);
    int val3 = x >> 31 & 1;
    return (val1 & val3) | ((~val1) & val2);
}

//4
/* 
 * logicalNeg - implement the ! operator, using all of 
 *              the legal operators except !
 *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
int logicalNeg(int x) {
    return ((x | (~x + 1)) >> 31) + 1;
}

/* howManyBits - return the minimum number of bits required to represent x in
 *             two's complement
 *  Examples: howManyBits(12) = 5
 *            howManyBits(298) = 10
 *            howManyBits(-5) = 4
 *            howManyBits(0)  = 1
 *            howManyBits(-1) = 1
 *            howManyBits(0x80000000) = 32
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 90
 *  Rating: 4
 */
int howManyBits(int x) {
    int val1 = !(x ^ 0);
    int val2 = !(x ^ (~0));
    int val3 = ~(~(val1 | val2) + 1);
    int bit_16, bit_8, bit_4, bit_2, bit_1;
    int sum;
    int op = x ^ (x >> 31);
    bit_16 = (!!(op >> 16)) << 4;
    op = op >> bit_16;
    bit_8 = (!!(op >> 8)) << 3;
    op = op >> bit_8;
    bit_4 = (!!(op >> 4)) << 2;
    op = op >> bit_4;
    bit_2 = (!!(op >> 2)) << 1;
    op = op >> bit_2;
    bit_1 = (!!(op >> 1));
    op = op >> bit_1;
    sum = 2 + bit_16 + bit_8 + bit_4 + bit_2 + bit_1;
    return val1 | val2 | (val3 & sum);
}
//float
/* 
 * floatScale2 - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned floatScale2(unsigned uf) {
    int ret;
    int exp = uf & 0x7f800000;
    int frac = uf & 0x7fffff;
    if (exp == 0x7f800000)
        return uf;
    else if (exp == 0)
        frac = frac << 1;
    else
        exp = exp + 0x800000;
    ret = (uf & 0x80000000) | exp | frac;
    return ret;
};
/* 
 * floatFloat2Int - Return bit-level equivalent of expression (int) f
 *   for floating point argument f.
 *   Argument is passed as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point value.
 *   Anything out of range (including NaN and infinity) should return
 *   0x80000000u.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
int floatFloat2Int(unsigned uf) {
    int exp = 0xff & (uf >> 23);
    int frac = 0x7fffff & uf;
    int sign = !!(uf >> 31);
    int tmp;

    if (exp > 127 + 30)
        return 0x80000000u;
    if (exp < 127)
        return 0;
    tmp = ((frac >> 23) + 1) << (exp - 127);
    if (sign)
        return (~tmp) + 1;
    else
        return tmp;
}
/* 
 * floatPower2 - Return bit-level equivalent of the expression 2.0^x
 *   (2.0 raised to the power x) for any 32-bit integer x.
 *
 *   The unsigned value that is returned should have the identical bit
 *   representation as the single-precision floating-point number 2.0^x.
 *   If the result is too small to be represented as a denorm, return
 *   0. If too large, return +INF.
 * 
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. Also if, while 
 *   Max ops: 30 
 *   Rating: 4
 */
unsigned floatPower2(int x) {
    if (x < -127) return 0;
    if (x > 128) return 0xff << 23;
    return (x + 127) << 23;
}
